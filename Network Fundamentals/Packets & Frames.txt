# What are Packets and Frames?

-> Packets and frames are small pieces of data that, when forming together, make a larger piece of information or message. However, they are two different things in the OSI model. A frame is at layer 2 - the data link layer, meaning there is no such information as IP addresses. Think of this as putting an envelope within an envelope and sending it away. The first envelope will be the packet that you mail, but once it is opened, the envelope within still exists and contains data (this is a frame).

This process is called encapsulation. At this stage, it's safe to assume that when we are talking about anything IP addresses, we are talking about packets. When the encapsulating information is stripped away, we're talking about the frame itself.

Packets are an efficient way of communicating data across networked devices. Because this data is exchanged in small pieces, there is less chance of bottlenecking occurring across a network than large messages being sent at once.

For example, when loading an image from a website, this image is not sent to your computer as a whole, but rather small pieces where it is reconstructed on your computer.

Packets have different structures that are dependant upon the type of packet that is being sent. As we'll come on to discuss, networking is full of standards and protocols that act as a set of rules for how the packet is handled on a device. With the Internet predicted to have approximately 50 billion devices connected by the end of 2020, things quickly get out of hand if there is no standardisation.

A packet using this protocol will have a set of headers that contain additional pieces of information to the data that is being sent across a network.

Some notable headers include:

	Header	                                                  Description

	Time to Live	            This field sets an expiry timer for the packet to not clog up your network if it never manages to reach a host or escape!

	Checksum	                This field provides integrity checking for protocols such as TCP/IP. If any data is changed, this value will be different from what was expected and therefore corrupt.

	Source Address	            The IP address of the device that the packet is being sent from so that data knows where to return to.
	
	Destination Address	        The device's IP address the packet is being sent to so that data knows where to travel next.



# TCP/IP (The Three-Way Handshake).

-> TCP (or Transmission Control Protocol for short) is another one of these rules used in networking.

This protocol is very similar to the OSI model. The TCP/IP protocol consists of four layers and is arguably just a summarised version of the OSI model. These layers are:

    Application
    Transport
    Internet
    Network Interface

Very similar to how the OSI model works, information is added to each layer of the TCP model as the piece of data (or packet) traverses it. As you may recall, this process is known as encapsulation - where the reverse of this process is decapsulation.

One defining feature of TCP is that it is connection-based, which means that TCP must establish a connection between both a client and a device acting as a server before data is sent.

Because of this, TCP guarantees that any data sent will be received on the other end. This process is named the Three-way handshake, which is something we'll come on to discuss shortly. A table comparing the advantages and disadvantages of TCP is located below:

          Advantages of TCP	                                               Disadvantages of TCP
    Guarantees the integrity of data.	                 Requires a reliable connection between the two devices.If one small chunk of data is not received, then the entire chunk of data cannot be used and must be re-sent.

Capable of synchronising two devices to prevent each     A slow connection can bottleneck another device as the connection will be reserved on the other device the whole time.
other from being flooded with data in the wrong order.	

Performs a lot more processes for reliability	         TCP is significantly slower than UDP because more work (computing) has to be done by the devices using this protocol.

TCP packets contain various sections of information known as headers that are added from encapsulation. Let's explain some of the crucial headers in the table below:

    Header	                                                            Description
    Source Port	                   This value is the port opened by the sender to send the TCP packet from. This value is chosen randomly (out of the ports from 0-65535 that aren't already in use at the time).
    Destination Port	           This value is the port number that an application or service is running on the remote host (the one receiving data); for example, a webserver running on port 80. Unlike the source port, this value is not chosen at random.
    Source IP	                   This is the IP address of the device that is sending the packet.
    Destination IP	               This is the IP address of the device that the packet is destined for.
    Sequence Number	               When a connection occurs, the first piece of data transmitted is given a random number.
    Acknowledgement Number	       After a piece of data has been given a sequence number, the number for the next piece of data will have the sequence number + 1.
    Checksum	                   This value is what gives TCP integrity. A mathematical calculation is made where the output is remembered. When the receiving device performs the mathematical calculation, the data must be corrupt if the output is different from what was sent.
    Data	                       This header is where the data, i.e. bytes of a file that is being transmitted, is stored.
    Flag	                       This header determines how the packet should be handled by either device during the handshake process. Specific flags will determine specific behaviours, which is what we'll come on to explain below.

Next, we'll come on to discuss the Three-way handshake - the term given for the process used to establish a connection between two devices. The Three-way handshake communicates using a few special messages - the table below highlights the main ones:

    Step	 Message	                                                 Description
    1	     SYN	               A SYN message is the initial packet sent by a client during the handshake. This packet is used to initiate a connection and synchronise the two devices together (we'll explain this further later on).
    2	     SYN/ACK	           This packet is sent by the receiving device (server) to acknowledge the synchronisation attempt from the client.
    3	     ACK	               The acknowledgement packet can be used by either the client or server to acknowledge that a series of messages/packets have been successfully received.
    4	     DATA	               Once a connection has been established, data (such as bytes of a file) is sent via the "DATA" message.
    5	     FIN	               This packet is used to cleanly (properly) close the connection after it has been complete.
    #	     RST	               This packet abruptly ends all communication. This is the last resort and indicates there was some problem during the process. For example, if the service or application is not working correctly, or the system has faults such as low resources. 



# UDP/IP.

-> The User Datagram Protocol (UDP) is another protocol that is used to communicate data between devices.

Unlike its brother TCP, UDP is a stateless protocol that doesn't require a constant connection between the two devices for data to be sent. For example, the Three-way handshake does not occur, nor is there any synchronisation between the two devices.

Recall some of the comparisons made about these two protocols in Room 3: "OSI Model". Namely, UDP is used in situations where applications can tolerate data being lost (such as video streaming or voice chat) or in scenarios where an unstable connection is not the end-all. A table comparing the advantages and disadvantages of UDP is located below:

Advantages of UDP	                              Disadvantages of UDP
UDP is much faster than TCP.	                  UDP doesn't care if the data is received or not.

UDP leaves the application (user software)        It is quite flexible to software developers in this sense.
to decide if there is any control over how 
quickly packets are sent.	   

UDP does not reserve a continuous connection      This means that unstable connections result in a terrible experience for the user.
on a device as TCP does.	

As mentioned, no process takes place in setting up a connection between two devices. Meaning that there is no regard for whether or not data is received, and there are no safeguards such as those offered by TCP, such as data integrity.

UDP packets are much simpler than TCP packets and have fewer headers. However, both protocols share some standard headers, which are what is annotated in the table below:

Header	               Description
Time to Live (TTL)	   This field sets an expiry timer for the packet, so it doesn't clog up your network if it never manages to reach a host or escape!	
Source Address	       The IP address of the device that the packet is being sent from, so that data knows where to return to.
Destination Address	   The device's IP address the packet is being sent to so that data knows where to travel next.
Source Port	           This value is the port that is opened by the sender to send the TCP packet from. This value is chosen randomly (out of the ports from 0-65535 that aren't already in use at the time).
Destination Port	   This value is the port number that an application or service is running on the remote host (the one receiving data); for example, a webserver running on port 80. Unlike the source port, this value is not chosen at random.
Data	               This header is where the data, i.e. bytes of a file that is being transmitted, is stored.